/***********************************************************************
 *                                                                     *
 *                  A U T O M A L S E L E C T   P A C K A G E         *
 *                                                                     *
 *                       S E L E C T _ B E S T _ M O D E L          *
 *                                                                     *
 ***********************************************************************/

/*! version 1.0
    -------------------------------------------------------------------------
    NAME
        select_best_model - Select the Best-Performing Machine Learning Model
    
    SYNOPSIS
        select_best_model using "metrics.csv", ///
            task(regression | classification) ///
            metric("Metric_Name") ///
            [ maximize | minimize ] ///
            [ save_results("best_model.csv") ]
    
    DESCRIPTION
        The `select_best_model` command is a vital component of the **AutoMLSelect**
        package, designed to evaluate and select the best-performing machine learning
        model based on user-specified performance metrics. It processes a CSV file
        containing performance metrics of multiple models, identifies the optimal
        model according to the chosen metric and direction (maximize or minimize),
        and optionally saves the details of the best model for future reference.
    
        **Key Functionalities:**
        - **Performance Evaluation:** Analyzes performance metrics of various trained models.
        - **Model Selection:** Selects the best model based on a specified metric and optimization direction.
        - **Result Saving:** Optionally saves the details of the selected best model to a CSV file.
    
    OPTIONS
        using("metrics.csv")
            Specifies the path to the CSV file containing the performance metrics of
            the trained models. The CSV should include a column named `model` that
            uniquely identifies each model and columns for each performance metric
            used in evaluation.
    
        task(regression | classification)
            Defines the type of machine learning task for which the models were trained:
                - `regression`       : Models predict continuous outcomes.
                - `classification`   : Models predict categorical outcomes (binary).
    
        metric("Metric_Name")
            Specifies the performance metric to prioritize when selecting the best model.
            The metric must be relevant to the specified task type:
                - **For Regression:**
                    - `"RMSE"`        : Root Mean Squared Error
                    - `"R-squared"`   : Coefficient of Determination
                    - `"MAE"`         : Mean Absolute Error
                    - `"MAPE"`        : Mean Absolute Percentage Error
                - **For Classification:**
                    - `"Accuracy"`    : Proportion of Correct Predictions
                    - `"Precision"`   : Positive Predictive Value
                    - `"Recall"`      : Sensitivity or True Positive Rate
                    - `"F1-Score"`    : Harmonic Mean of Precision and Recall
                    - `"AUC"`         : Area Under the ROC Curve
    
        maximize
            (Optional) Indicates that the specified metric should be maximized when selecting the best model.
            This is the default behavior if neither `maximize` nor `minimize` is specified.
    
        minimize
            (Optional) Indicates that the specified metric should be minimized when selecting the best model.
    
        save_results("best_model.csv")
            (Optional) Specifies the filename to save the details of the best-performing model.
            If provided, the details will be exported to the designated CSV file.
    
    EXAMPLES
    
        1. **Selecting the Best Regression Model Based on R-squared**
    
            Suppose you have a CSV file `regression_metrics.csv` containing performance metrics
            for various regression models. You want to select the model with the highest R-squared
            value.
    
            ```stata
            . select_best_model using "regression_metrics.csv", ///
                  task(regression) ///
                  metric("R-squared") ///
                  maximize ///
                  save_results("best_regression_model.csv")
            ```
    
            **Explanation:**
            - **Input File:** `regression_metrics.csv` containing metrics like R-squared, RMSE, etc.
            - **Task Type:** `regression`
            - **Metric:** `"R-squared"`
            - **Direction:** `maximize` (default)
            - **Save Results:** Exports the best model's details to `best_regression_model.csv`.
    
        2. **Selecting the Best Classification Model Based on AUC**
    
            Consider a CSV file `classification_metrics.csv` with performance metrics for various
            classification models. You aim to select the model with the highest AUC.
    
            ```stata
            . select_best_model using "classification_metrics.csv", ///
                  task(classification) ///
                  metric("AUC") ///
                  maximize ///
                  save_results("best_classification_model.csv")
            ```
    
            **Explanation:**
            - **Input File:** `classification_metrics.csv` containing metrics like Accuracy, Precision, Recall, AUC, etc.
            - **Task Type:** `classification`
            - **Metric:** `"AUC"`
            - **Direction:** `maximize`
            - **Save Results:** Exports the best model's details to `best_classification_model.csv`.
    
        3. **Selecting the Best Regression Model Based on RMSE (Minimize) Without Saving Results**
    
            You have a CSV file `regression_metrics.csv` and want to select the model with the lowest RMSE.
            You do not need to save the results to a file.
    
            ```stata
            . select_best_model using "regression_metrics.csv", ///
                  task(regression) ///
                  metric("RMSE") ///
                  minimize
            ```
    
            **Explanation:**
            - **Input File:** `regression_metrics.csv`
            - **Task Type:** `regression`
            - **Metric:** `"RMSE"`
            - **Direction:** `minimize`
            - **Save Results:** Not specified; results will be displayed in the Stata output.
    
    NOTES
        - **Input File Requirements:**
            - The CSV file specified in the `using()` option must contain a column named `model` that uniquely identifies each trained model.
            - The CSV should also include columns for each performance metric relevant to the models being evaluated.
            - Ensure that the metric specified in the `metric()` option exists in the CSV file and is appropriate for the task type.
    
        - **Metric Validity:**
            - The selected metric must be valid for the specified task type. For example, selecting `"R-squared"` for a classification task will result in an error.
            - Commonly used metrics for each task type are provided in the OPTIONS section.
    
        - **Direction Specification:**
            - If neither `maximize` nor `minimize` is specified, the command defaults to `maximize`.
            - Only one of `maximize` or `minimize` can be specified at a time. Specifying both will result in an error.
    
        - **Saving Results:**
            - When using the `save_results()` option, ensure that the specified filename does not conflict with existing important files, as the command will overwrite existing files without prompt.
            - The saved CSV will contain details of the best-performing model, including all its performance metrics.
    
        - **Error Handling:**
            - The command includes comprehensive input validation. Ensure that all required options are correctly specified to avoid errors.
            - Common errors include missing required options, specifying invalid metrics for the task type, and providing a CSV file that does not contain the necessary columns.
    
        - **Integration with AutoMLSelect Workflow:**
            - Typically, `select_best_model` is used as part of the broader `automlselect` command workflow, which includes data preprocessing, model training, evaluation, and selection.
    
    AUTHOR
        Developed by [Your Name or Organization], 2024.
    
    VERSION
        1.0
    
    SEE ALSO
        automlselect, automlselect_preprocess, automlselect_train, automlselect_evaluate, train_linear_regression, train_logistic_regression, train_random_forest
