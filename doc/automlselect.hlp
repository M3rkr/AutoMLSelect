*********************************************************************
*                                                                   *
*                   A U T O M A T E D   M A C H I N E               *
*                                                                   *
*                      L E A R N I N G   S E L E C T               *
*                                                                   *
*********************************************************************

NAME
    automlselect - Automated Machine Learning Model Selection

SYNOPSIS
    automlselect using "data.csv", ///
        target(target_variable) ///
        predictors(varlist) ///
        [ task(regression|classification) ///
          preprocess_options(...) ///
          train_options(...) ///
          evaluate_options(...) ///
          select_options(...) ///
          save_results(string) ]

DESCRIPTION
    The `automlselect` command provides an automated workflow for selecting the best-performing machine learning model within the Stata environment. It streamlines the process of data preprocessing, model training, performance evaluation, and model selection based on user-defined criteria. This function is part of the **"AutoMLSelect"** package, which offers a suite of tools for automated machine learning tasks.

    **Key Features:**
    - **Data Preprocessing:** Handles missing values, encodes categorical variables, and prepares the dataset for modeling.
    - **Model Training:** Trains multiple machine learning models, including Linear Regression, Logistic Regression, and Random Forest.
    - **Performance Evaluation:** Calculates relevant performance metrics for each trained model.
    - **Model Selection:** Determines the best model based on specified evaluation criteria.
    - **Result Saving:** Optionally saves the best model's details and performance metrics for future reference.

    By automating these steps, `automlselect` simplifies the machine learning workflow, enabling users to efficiently identify the most suitable model for their data analysis needs.

SYNTAX
    automlselect using "data.csv", ///
        target(target_variable) ///
        predictors(varlist) ///
        [ task(regression|classification) ///
          preprocess_options(...) ///
          train_options(...) ///
          evaluate_options(...) ///
          select_options(...) ///
          save_results(string) ]

OPTIONS
    using("data.csv")
        Specifies the path to the input CSV file containing the dataset. The file should be in comma-separated values (CSV) format and encoded in UTF-8.

    target(varname)
        Identifies the target (dependent) variable in the dataset. For regression tasks, this should be a continuous numeric variable. For classification tasks, this should be a binary categorical variable.

    predictors(varlist)
        Lists the predictor (independent) variables to be used in model training. These can include both numeric and categorical variables.

    task(regression|classification)
        Defines the type of machine learning task:
        - `regression`: For predicting continuous outcomes.
        - `classification`: For predicting categorical outcomes (binary).

    preprocess_options(...)
        Specifies additional options for data preprocessing. These options are passed to the `preprocess_data.ado` function and can include methods for handling missing values, encoding strategies, and more.

    train_options(...)
        Defines options related to model training. These options are passed to the respective training functions (`train_linear_regression.ado`, `train_logistic_regression.ado`, `train_random_forest.ado`, etc.) and can include parameters like the number of trees for Random Forests, regularization methods, and more.

    evaluate_options(...)
        Sets options for performance evaluation. These are passed to the evaluation functions (`evaluate_regression.ado`, `evaluate_classification.ado`) and can include specifications for which metrics to calculate or whether to save evaluation results.

    select_options(...)
        Configures options for model selection. These options are passed to the `select_best_model.ado` function and can include criteria for selecting the best model, such as which metric to prioritize.

    save_results(string)
        (Optional) Specifies the filename to save the best model's details and performance metrics. If provided, the results will be exported to the designated CSV file.

EXAMPLES

    1. **Regression Task: Selecting the Best Linear Regression Model Based on R-squared**
    
        Suppose you have a dataset `housing_data.csv` with the target variable `Price` and predictor variables `Size`, `Bedrooms`, `Age`, and `Location`. You want to preprocess the data, train multiple regression models, evaluate them using R-squared, and select the best model.
    
        ```stata
        . automlselect using "housing_data.csv", ///
              target(Price) ///
              predictors(Size Bedrooms Age Location) ///
              task(regression) ///
              preprocess_options(handle_missing(mean) encode_onehot) ///
              train_options(models(linear_regression random_forest)) ///
              evaluate_options(metrics(R-squared RMSE)) ///
              select_options(metric("R-squared") maximize) ///
              save_results("best_regression_model.csv")
        ```
    
        **Explanation:**
        - **Preprocessing:** Handles missing values by imputing the mean for numeric variables and performs one-hot encoding for categorical variables.
        - **Training:** Trains both Linear Regression and Random Forest models.
        - **Evaluation:** Calculates R-squared and RMSE for each model.
        - **Selection:** Chooses the model with the highest R-squared value.
        - **Saving Results:** Exports the best model's details to `best_regression_model.csv`.
    
    2. **Classification Task: Selecting the Best Logistic Regression Model Based on AUC**
    
        Consider a dataset `customer_data.csv` with the target variable `Churn` (binary: Yes/No) and predictor variables `Age`, `Gender`, `Income`, and `Subscription_Length`. You aim to preprocess the data, train multiple classification models, evaluate them using AUC, and select the best model.
    
        ```stata
        . automlselect using "customer_data.csv", ///
              target(Churn) ///
              predictors(Age Gender Income Subscription_Length) ///
              task(classification) ///
              preprocess_options(handle_missing(mode) encode_onehot) ///
              train_options(models(logistic_regression random_forest)) ///
              evaluate_options(metrics(AUC Accuracy)) ///
              select_options(metric("AUC") maximize) ///
              save_results("best_classification_model.csv")
        ```
    
        **Explanation:**
        - **Preprocessing:** Handles missing values by imputing the mode for categorical variables and performs one-hot encoding.
        - **Training:** Trains both Logistic Regression and Random Forest models.
        - **Evaluation:** Calculates AUC and Accuracy for each model.
        - **Selection:** Chooses the model with the highest AUC value.
        - **Saving Results:** Exports the best model's details to `best_classification_model.csv`.
    
    3. **Customizing Model Training and Evaluation**
    
        You can further customize the model training and evaluation processes by specifying additional options. For example, to train a Random Forest with 1000 trees and evaluate using Precision and Recall:
    
        ```stata
        . automlselect using "sales_data.csv", ///
              target(Sales) ///
              predictors(Advertising Price Competition) ///
              task(regression) ///
              preprocess_options(handle_missing(mean) encode_onehot) ///
              train_options(models(random_forest) trees(1000)) ///
              evaluate_options(metrics(Precision Recall)) ///
              select_options(metric("Precision") maximize) ///
              save_results("best_sales_model.csv")
        ```
    
        **Explanation:**
        - **Training:** Trains a Random Forest model with 1000 trees.
        - **Evaluation:** Calculates Precision and Recall for the model.
        - **Selection:** Chooses the model with the highest Precision value.
        - **Saving Results:** Exports the best model's details to `best_sales_model.csv`.
    
NOTES
    - **Data Requirements:** Ensure that the input CSV file is properly formatted with a header row containing variable names. Categorical variables should be appropriately encoded or specified for encoding during preprocessing.
    - **Preprocessing Options:** Customize preprocessing steps based on the nature of your data. Options may include methods for handling missing values (e.g., mean, median, mode), encoding strategies (e.g., one-hot, label encoding), and feature scaling.
    - **Model Training:** The `train_options` allow you to specify which models to train and their specific parameters. Ensure that the models you specify are supported by the package.
    - **Evaluation Metrics:** Select metrics that align with your modeling goals. For regression tasks, metrics like R-squared and RMSE are common, while classification tasks often use Accuracy, Precision, Recall, F1-Score, and AUC.
    - **Model Selection Criteria:** Clearly define which metric should be prioritized when selecting the best model. The `select_options` allow you to specify the metric and whether to maximize or minimize it.
    - **Saving Results:** Use the `save_results` option to keep a record of the best model and its performance metrics for reporting or further analysis.

AUTHORS
    Developed by [Your Name or Organization], 2024.

VERSION
    1.0

SEE ALSO
    preprocess_data, train_linear_regression, train_logistic_regression, train_random_forest, evaluate_regression, evaluate_classification, select_best_model


